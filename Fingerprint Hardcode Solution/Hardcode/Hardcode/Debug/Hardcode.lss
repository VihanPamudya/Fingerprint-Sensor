
Hardcode.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000542  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000e8  00800060  00000542  000005b6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000069e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000006d0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  0000070c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000f53  00000000  00000000  0000075c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000069d  00000000  00000000  000016af  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000005c8  00000000  00000000  00001d4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000cc  00000000  00000000  00002314  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000039e  00000000  00000000  000023e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000007a0  00000000  00000000  0000277e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000070  00000000  00000000  00002f1e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	11 e0       	ldi	r17, 0x01	; 1
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e4       	ldi	r30, 0x42	; 66
  68:	f5 e0       	ldi	r31, 0x05	; 5
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 34       	cpi	r26, 0x48	; 72
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 52 02 	call	0x4a4	; 0x4a4 <main>
  7a:	0c 94 9f 02 	jmp	0x53e	; 0x53e <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <lcdwrite>:
};


void lcdwrite(char ch, char r)
{
	LCDPORT = ch & 0xF0;
  82:	98 2f       	mov	r25, r24
  84:	90 7f       	andi	r25, 0xF0	; 240
  86:	98 bb       	out	0x18, r25	; 24
	RWLow;
  88:	98 b3       	in	r25, 0x18	; 24
  8a:	9d 7f       	andi	r25, 0xFD	; 253
  8c:	98 bb       	out	0x18, r25	; 24
	if (r == 1)
  8e:	61 30       	cpi	r22, 0x01	; 1
  90:	21 f4       	brne	.+8      	; 0x9a <lcdwrite+0x18>
	RSHigh;
  92:	98 b3       	in	r25, 0x18	; 24
  94:	91 60       	ori	r25, 0x01	; 1
  96:	98 bb       	out	0x18, r25	; 24
  98:	03 c0       	rjmp	.+6      	; 0xa0 <lcdwrite+0x1e>
	else
	RSLow;
  9a:	98 b3       	in	r25, 0x18	; 24
  9c:	9e 7f       	andi	r25, 0xFE	; 254
  9e:	98 bb       	out	0x18, r25	; 24
	ENHigh;
  a0:	98 b3       	in	r25, 0x18	; 24
  a2:	94 60       	ori	r25, 0x04	; 4
  a4:	98 bb       	out	0x18, r25	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a6:	ef e0       	ldi	r30, 0x0F	; 15
  a8:	f7 e2       	ldi	r31, 0x27	; 39
  aa:	31 97       	sbiw	r30, 0x01	; 1
  ac:	f1 f7       	brne	.-4      	; 0xaa <lcdwrite+0x28>
  ae:	00 c0       	rjmp	.+0      	; 0xb0 <lcdwrite+0x2e>
  b0:	00 00       	nop
	_delay_ms(5);
	ENLow;
  b2:	98 b3       	in	r25, 0x18	; 24
  b4:	9b 7f       	andi	r25, 0xFB	; 251
  b6:	98 bb       	out	0x18, r25	; 24
  b8:	ef e1       	ldi	r30, 0x1F	; 31
  ba:	fe e4       	ldi	r31, 0x4E	; 78
  bc:	31 97       	sbiw	r30, 0x01	; 1
  be:	f1 f7       	brne	.-4      	; 0xbc <lcdwrite+0x3a>
  c0:	00 c0       	rjmp	.+0      	; 0xc2 <lcdwrite+0x40>
  c2:	00 00       	nop
	_delay_ms(10);

	LCDPORT = ch << 4 & 0xF0;
  c4:	f0 e1       	ldi	r31, 0x10	; 16
  c6:	8f 9f       	mul	r24, r31
  c8:	c0 01       	movw	r24, r0
  ca:	11 24       	eor	r1, r1
  cc:	88 bb       	out	0x18, r24	; 24
	RWLow;
  ce:	88 b3       	in	r24, 0x18	; 24
  d0:	8d 7f       	andi	r24, 0xFD	; 253
  d2:	88 bb       	out	0x18, r24	; 24
	if (r == 1)
  d4:	61 30       	cpi	r22, 0x01	; 1
  d6:	21 f4       	brne	.+8      	; 0xe0 <lcdwrite+0x5e>
	RSHigh;
  d8:	88 b3       	in	r24, 0x18	; 24
  da:	81 60       	ori	r24, 0x01	; 1
  dc:	88 bb       	out	0x18, r24	; 24
  de:	03 c0       	rjmp	.+6      	; 0xe6 <lcdwrite+0x64>
	else
	RSLow;
  e0:	88 b3       	in	r24, 0x18	; 24
  e2:	8e 7f       	andi	r24, 0xFE	; 254
  e4:	88 bb       	out	0x18, r24	; 24
	ENHigh;
  e6:	88 b3       	in	r24, 0x18	; 24
  e8:	84 60       	ori	r24, 0x04	; 4
  ea:	88 bb       	out	0x18, r24	; 24
  ec:	8f e0       	ldi	r24, 0x0F	; 15
  ee:	97 e2       	ldi	r25, 0x27	; 39
  f0:	01 97       	sbiw	r24, 0x01	; 1
  f2:	f1 f7       	brne	.-4      	; 0xf0 <lcdwrite+0x6e>
  f4:	00 c0       	rjmp	.+0      	; 0xf6 <lcdwrite+0x74>
  f6:	00 00       	nop
	_delay_ms(5);
	ENLow;
  f8:	88 b3       	in	r24, 0x18	; 24
  fa:	8b 7f       	andi	r24, 0xFB	; 251
  fc:	88 bb       	out	0x18, r24	; 24
  fe:	ef e1       	ldi	r30, 0x1F	; 31
 100:	fe e4       	ldi	r31, 0x4E	; 78
 102:	31 97       	sbiw	r30, 0x01	; 1
 104:	f1 f7       	brne	.-4      	; 0x102 <lcdwrite+0x80>
 106:	00 c0       	rjmp	.+0      	; 0x108 <lcdwrite+0x86>
 108:	00 00       	nop
 10a:	08 95       	ret

0000010c <lcdprint>:
	_delay_ms(10);
}

void lcdprint(char *str)
{
 10c:	cf 93       	push	r28
 10e:	df 93       	push	r29
 110:	ec 01       	movw	r28, r24
	while (*str)
 112:	0a c0       	rjmp	.+20     	; 0x128 <lcdprint+0x1c>
	{
		lcdwrite(*str++, DATA);
 114:	21 96       	adiw	r28, 0x01	; 1
 116:	61 e0       	ldi	r22, 0x01	; 1
 118:	0e 94 41 00 	call	0x82	; 0x82 <lcdwrite>
 11c:	8f e0       	ldi	r24, 0x0F	; 15
 11e:	97 e2       	ldi	r25, 0x27	; 39
 120:	01 97       	sbiw	r24, 0x01	; 1
 122:	f1 f7       	brne	.-4      	; 0x120 <lcdprint+0x14>
 124:	00 c0       	rjmp	.+0      	; 0x126 <lcdprint+0x1a>
 126:	00 00       	nop
	_delay_ms(10);
}

void lcdprint(char *str)
{
	while (*str)
 128:	88 81       	ld	r24, Y
 12a:	81 11       	cpse	r24, r1
 12c:	f3 cf       	rjmp	.-26     	; 0x114 <lcdprint+0x8>
	{
		lcdwrite(*str++, DATA);
		_delay_ms(5);
	}
}
 12e:	df 91       	pop	r29
 130:	cf 91       	pop	r28
 132:	08 95       	ret

00000134 <lcdbegin>:

void lcdbegin()
{
 134:	0f 93       	push	r16
 136:	1f 93       	push	r17
 138:	cf 93       	push	r28
 13a:	df 93       	push	r29
 13c:	00 d0       	rcall	.+0      	; 0x13e <lcdbegin+0xa>
 13e:	00 d0       	rcall	.+0      	; 0x140 <lcdbegin+0xc>
 140:	1f 92       	push	r1
 142:	cd b7       	in	r28, 0x3d	; 61
 144:	de b7       	in	r29, 0x3e	; 62
	uchar lcdcmd[5] = {0x02, 0x28, 0x0E, 0x06, 0x01};
 146:	85 e0       	ldi	r24, 0x05	; 5
 148:	e0 e6       	ldi	r30, 0x60	; 96
 14a:	f0 e0       	ldi	r31, 0x00	; 0
 14c:	de 01       	movw	r26, r28
 14e:	11 96       	adiw	r26, 0x01	; 1
 150:	01 90       	ld	r0, Z+
 152:	0d 92       	st	X+, r0
 154:	8a 95       	dec	r24
 156:	e1 f7       	brne	.-8      	; 0x150 <lcdbegin+0x1c>
	uint i = 0;
	for (i = 0; i < 5; i++)
 158:	00 e0       	ldi	r16, 0x00	; 0
 15a:	10 e0       	ldi	r17, 0x00	; 0
 15c:	0c c0       	rjmp	.+24     	; 0x176 <lcdbegin+0x42>
	lcdwrite(lcdcmd[i], CMD);
 15e:	e1 e0       	ldi	r30, 0x01	; 1
 160:	f0 e0       	ldi	r31, 0x00	; 0
 162:	ec 0f       	add	r30, r28
 164:	fd 1f       	adc	r31, r29
 166:	e0 0f       	add	r30, r16
 168:	f1 1f       	adc	r31, r17
 16a:	60 e0       	ldi	r22, 0x00	; 0
 16c:	80 81       	ld	r24, Z
 16e:	0e 94 41 00 	call	0x82	; 0x82 <lcdwrite>

void lcdbegin()
{
	uchar lcdcmd[5] = {0x02, 0x28, 0x0E, 0x06, 0x01};
	uint i = 0;
	for (i = 0; i < 5; i++)
 172:	0f 5f       	subi	r16, 0xFF	; 255
 174:	1f 4f       	sbci	r17, 0xFF	; 255
 176:	05 30       	cpi	r16, 0x05	; 5
 178:	11 05       	cpc	r17, r1
 17a:	88 f3       	brcs	.-30     	; 0x15e <lcdbegin+0x2a>
	lcdwrite(lcdcmd[i], CMD);
}
 17c:	0f 90       	pop	r0
 17e:	0f 90       	pop	r0
 180:	0f 90       	pop	r0
 182:	0f 90       	pop	r0
 184:	0f 90       	pop	r0
 186:	df 91       	pop	r29
 188:	cf 91       	pop	r28
 18a:	1f 91       	pop	r17
 18c:	0f 91       	pop	r16
 18e:	08 95       	ret

00000190 <buzzer>:

void buzzer(uint t)
{
	PORTD |= (1<<PD3);
 190:	22 b3       	in	r18, 0x12	; 18
 192:	28 60       	ori	r18, 0x08	; 8
 194:	22 bb       	out	0x12, r18	; 18
	for (int i = 0; i < t; i++)
 196:	20 e0       	ldi	r18, 0x00	; 0
 198:	30 e0       	ldi	r19, 0x00	; 0
 19a:	08 c0       	rjmp	.+16     	; 0x1ac <buzzer+0x1c>
 19c:	ef ec       	ldi	r30, 0xCF	; 207
 19e:	f7 e0       	ldi	r31, 0x07	; 7
 1a0:	31 97       	sbiw	r30, 0x01	; 1
 1a2:	f1 f7       	brne	.-4      	; 0x1a0 <buzzer+0x10>
 1a4:	00 c0       	rjmp	.+0      	; 0x1a6 <buzzer+0x16>
 1a6:	00 00       	nop
 1a8:	2f 5f       	subi	r18, 0xFF	; 255
 1aa:	3f 4f       	sbci	r19, 0xFF	; 255
 1ac:	28 17       	cp	r18, r24
 1ae:	39 07       	cpc	r19, r25
 1b0:	a8 f3       	brcs	.-22     	; 0x19c <buzzer+0xc>
	_delay_ms(1);
	PORTD &= ~(1<<PD3);
 1b2:	82 b3       	in	r24, 0x12	; 18
 1b4:	87 7f       	andi	r24, 0xF7	; 247
 1b6:	82 bb       	out	0x12, r24	; 18
 1b8:	08 95       	ret

000001ba <fingerprintright>:
}

void fingerprintright(){
 1ba:	cf 93       	push	r28
 1bc:	df 93       	push	r29
 1be:	cd b7       	in	r28, 0x3d	; 61
 1c0:	de b7       	in	r29, 0x3e	; 62
 1c2:	c0 56       	subi	r28, 0x60	; 96
 1c4:	d1 09       	sbc	r29, r1
 1c6:	0f b6       	in	r0, 0x3f	; 63
 1c8:	f8 94       	cli
 1ca:	de bf       	out	0x3e, r29	; 62
 1cc:	0f be       	out	0x3f, r0	; 63
 1ce:	cd bf       	out	0x3d, r28	; 61
	int input[8] = {1,1,1,1,0,0,0,0};
 1d0:	80 e1       	ldi	r24, 0x10	; 16
 1d2:	e5 e6       	ldi	r30, 0x65	; 101
 1d4:	f0 e0       	ldi	r31, 0x00	; 0
 1d6:	de 01       	movw	r26, r28
 1d8:	11 96       	adiw	r26, 0x01	; 1
 1da:	01 90       	ld	r0, Z+
 1dc:	0d 92       	st	X+, r0
 1de:	8a 95       	dec	r24
 1e0:	e1 f7       	brne	.-8      	; 0x1da <fingerprintright+0x20>
	int status = 0;

	int storedArray[5][8] = {{1,1,1,0,0,0,0,0},
 1e2:	80 e5       	ldi	r24, 0x50	; 80
 1e4:	e5 e7       	ldi	r30, 0x75	; 117
 1e6:	f0 e0       	ldi	r31, 0x00	; 0
 1e8:	de 01       	movw	r26, r28
 1ea:	51 96       	adiw	r26, 0x11	; 17
 1ec:	01 90       	ld	r0, Z+
 1ee:	0d 92       	st	X+, r0
 1f0:	8a 95       	dec	r24
 1f2:	e1 f7       	brne	.-8      	; 0x1ec <fingerprintright+0x32>
	{0,0,1,0,0,0,0,0},
	{1,1,1,0,0,0,1,0},
	{1,1,1,1,0,0,0,0}};


	for(int i=0;i<5;i++){
 1f4:	20 e0       	ldi	r18, 0x00	; 0
 1f6:	30 e0       	ldi	r19, 0x00	; 0
 1f8:	2d c0       	rjmp	.+90     	; 0x254 <fingerprintright+0x9a>

		for(int j=0;j<8;j++){

			if(input[j]==storedArray[i][j]){
 1fa:	fc 01       	movw	r30, r24
 1fc:	ee 0f       	add	r30, r30
 1fe:	ff 1f       	adc	r31, r31
 200:	61 e0       	ldi	r22, 0x01	; 1
 202:	70 e0       	ldi	r23, 0x00	; 0
 204:	6c 0f       	add	r22, r28
 206:	7d 1f       	adc	r23, r29
 208:	e6 0f       	add	r30, r22
 20a:	f7 1f       	adc	r31, r23
 20c:	a0 81       	ld	r26, Z
 20e:	b1 81       	ldd	r27, Z+1	; 0x01
 210:	f9 01       	movw	r30, r18
 212:	ee 0f       	add	r30, r30
 214:	ff 1f       	adc	r31, r31
 216:	ee 0f       	add	r30, r30
 218:	ff 1f       	adc	r31, r31
 21a:	ee 0f       	add	r30, r30
 21c:	ff 1f       	adc	r31, r31
 21e:	e8 0f       	add	r30, r24
 220:	f9 1f       	adc	r31, r25
 222:	ee 0f       	add	r30, r30
 224:	ff 1f       	adc	r31, r31
 226:	e6 0f       	add	r30, r22
 228:	f7 1f       	adc	r31, r23
 22a:	60 89       	ldd	r22, Z+16	; 0x10
 22c:	71 89       	ldd	r23, Z+17	; 0x11
 22e:	a6 17       	cp	r26, r22
 230:	b7 07       	cpc	r27, r23
 232:	11 f4       	brne	.+4      	; 0x238 <fingerprintright+0x7e>
				status++;
 234:	4f 5f       	subi	r20, 0xFF	; 255
 236:	5f 4f       	sbci	r21, 0xFF	; 255
	{1,1,1,1,0,0,0,0}};


	for(int i=0;i<5;i++){

		for(int j=0;j<8;j++){
 238:	01 96       	adiw	r24, 0x01	; 1
 23a:	04 c0       	rjmp	.+8      	; 0x244 <fingerprintright+0x8a>
 23c:	80 e0       	ldi	r24, 0x00	; 0
 23e:	90 e0       	ldi	r25, 0x00	; 0
 240:	40 e0       	ldi	r20, 0x00	; 0
 242:	50 e0       	ldi	r21, 0x00	; 0
 244:	88 30       	cpi	r24, 0x08	; 8
 246:	91 05       	cpc	r25, r1
 248:	c4 f2       	brlt	.-80     	; 0x1fa <fingerprintright+0x40>
			if(input[j]==storedArray[i][j]){
				status++;
			}
		}

		if(status==8){
 24a:	48 30       	cpi	r20, 0x08	; 8
 24c:	51 05       	cpc	r21, r1
 24e:	39 f0       	breq	.+14     	; 0x25e <fingerprintright+0xa4>
	{0,0,1,0,0,0,0,0},
	{1,1,1,0,0,0,1,0},
	{1,1,1,1,0,0,0,0}};


	for(int i=0;i<5;i++){
 250:	2f 5f       	subi	r18, 0xFF	; 255
 252:	3f 4f       	sbci	r19, 0xFF	; 255
 254:	25 30       	cpi	r18, 0x05	; 5
 256:	31 05       	cpc	r19, r1
 258:	8c f3       	brlt	.-30     	; 0x23c <fingerprintright+0x82>
 25a:	40 e0       	ldi	r20, 0x00	; 0
 25c:	50 e0       	ldi	r21, 0x00	; 0
			status=0;
		}
	}


	if(status==8){
 25e:	48 30       	cpi	r20, 0x08	; 8
 260:	51 05       	cpc	r21, r1
 262:	09 f0       	breq	.+2      	; 0x266 <fingerprintright+0xac>
 264:	5b c0       	rjmp	.+182    	; 0x31c <fingerprintright+0x162>
		buzzer(1000);
 266:	88 ee       	ldi	r24, 0xE8	; 232
 268:	93 e0       	ldi	r25, 0x03	; 3
 26a:	0e 94 c8 00 	call	0x190	; 0x190 <buzzer>
		PORTD |= (1<<PD0);
 26e:	82 b3       	in	r24, 0x12	; 18
 270:	81 60       	ori	r24, 0x01	; 1
 272:	82 bb       	out	0x12, r24	; 18
 274:	7f ef       	ldi	r23, 0xFF	; 255
 276:	83 ed       	ldi	r24, 0xD3	; 211
 278:	90 e3       	ldi	r25, 0x30	; 48
 27a:	71 50       	subi	r23, 0x01	; 1
 27c:	80 40       	sbci	r24, 0x00	; 0
 27e:	90 40       	sbci	r25, 0x00	; 0
 280:	e1 f7       	brne	.-8      	; 0x27a <fingerprintright+0xc0>
 282:	00 c0       	rjmp	.+0      	; 0x284 <fingerprintright+0xca>
 284:	00 00       	nop
		_delay_ms(2000);
		PORTD &= ~(1<<PD0);
 286:	82 b3       	in	r24, 0x12	; 18
 288:	8e 7f       	andi	r24, 0xFE	; 254
 28a:	82 bb       	out	0x12, r24	; 18
		lcdwrite(1, CMD);
 28c:	60 e0       	ldi	r22, 0x00	; 0
 28e:	81 e0       	ldi	r24, 0x01	; 1
 290:	0e 94 41 00 	call	0x82	; 0x82 <lcdwrite>
		lcdprint("  FP entry is");
 294:	85 ed       	ldi	r24, 0xD5	; 213
 296:	90 e0       	ldi	r25, 0x00	; 0
 298:	0e 94 86 00 	call	0x10c	; 0x10c <lcdprint>
		lcdwrite(192, CMD);
 29c:	60 e0       	ldi	r22, 0x00	; 0
 29e:	80 ec       	ldi	r24, 0xC0	; 192
 2a0:	0e 94 41 00 	call	0x82	; 0x82 <lcdwrite>
		lcdprint("   succeeded");
 2a4:	83 ee       	ldi	r24, 0xE3	; 227
 2a6:	90 e0       	ldi	r25, 0x00	; 0
 2a8:	0e 94 86 00 	call	0x10c	; 0x10c <lcdprint>
 2ac:	2f ef       	ldi	r18, 0xFF	; 255
 2ae:	68 e0       	ldi	r22, 0x08	; 8
 2b0:	7d e3       	ldi	r23, 0x3D	; 61
 2b2:	21 50       	subi	r18, 0x01	; 1
 2b4:	60 40       	sbci	r22, 0x00	; 0
 2b6:	70 40       	sbci	r23, 0x00	; 0
 2b8:	e1 f7       	brne	.-8      	; 0x2b2 <fingerprintright+0xf8>
 2ba:	00 c0       	rjmp	.+0      	; 0x2bc <fingerprintright+0x102>
 2bc:	00 00       	nop
		_delay_ms(2500);
		lcdwrite(1, CMD);
 2be:	60 e0       	ldi	r22, 0x00	; 0
 2c0:	81 e0       	ldi	r24, 0x01	; 1
 2c2:	0e 94 41 00 	call	0x82	; 0x82 <lcdwrite>
		lcdprint(" --Safe Locker--");
 2c6:	80 ef       	ldi	r24, 0xF0	; 240
 2c8:	90 e0       	ldi	r25, 0x00	; 0
 2ca:	0e 94 86 00 	call	0x10c	; 0x10c <lcdprint>
		lcdwrite(192, CMD);
 2ce:	60 e0       	ldi	r22, 0x00	; 0
 2d0:	80 ec       	ldi	r24, 0xC0	; 192
 2d2:	0e 94 41 00 	call	0x82	; 0x82 <lcdwrite>
		lcdprint(" Using Atmega32");
 2d6:	81 e0       	ldi	r24, 0x01	; 1
 2d8:	91 e0       	ldi	r25, 0x01	; 1
 2da:	0e 94 86 00 	call	0x10c	; 0x10c <lcdprint>
 2de:	8f ef       	ldi	r24, 0xFF	; 255
 2e0:	93 ed       	ldi	r25, 0xD3	; 211
 2e2:	20 e3       	ldi	r18, 0x30	; 48
 2e4:	81 50       	subi	r24, 0x01	; 1
 2e6:	90 40       	sbci	r25, 0x00	; 0
 2e8:	20 40       	sbci	r18, 0x00	; 0
 2ea:	e1 f7       	brne	.-8      	; 0x2e4 <fingerprintright+0x12a>
 2ec:	00 c0       	rjmp	.+0      	; 0x2ee <fingerprintright+0x134>
 2ee:	00 00       	nop
		_delay_ms(2000);
		
		lcdwrite(1, CMD);
 2f0:	60 e0       	ldi	r22, 0x00	; 0
 2f2:	81 e0       	ldi	r24, 0x01	; 1
 2f4:	0e 94 41 00 	call	0x82	; 0x82 <lcdwrite>
		lcdprint("    FP Found");
 2f8:	81 e1       	ldi	r24, 0x11	; 17
 2fa:	91 e0       	ldi	r25, 0x01	; 1
 2fc:	0e 94 86 00 	call	0x10c	; 0x10c <lcdprint>
 300:	8f e1       	ldi	r24, 0x1F	; 31
 302:	9e e4       	ldi	r25, 0x4E	; 78
 304:	01 97       	sbiw	r24, 0x01	; 1
 306:	f1 f7       	brne	.-4      	; 0x304 <fingerprintright+0x14a>
 308:	00 c0       	rjmp	.+0      	; 0x30a <fingerprintright+0x150>
 30a:	00 00       	nop
		_delay_ms(10);
		lcdwrite(192, CMD);
 30c:	60 e0       	ldi	r22, 0x00	; 0
 30e:	80 ec       	ldi	r24, 0xC0	; 192
 310:	0e 94 41 00 	call	0x82	; 0x82 <lcdwrite>
		lcdprint("  Place Finger");
 314:	8e e1       	ldi	r24, 0x1E	; 30
 316:	91 e0       	ldi	r25, 0x01	; 1
 318:	0e 94 86 00 	call	0x10c	; 0x10c <lcdprint>
	}

}
 31c:	c0 5a       	subi	r28, 0xA0	; 160
 31e:	df 4f       	sbci	r29, 0xFF	; 255
 320:	0f b6       	in	r0, 0x3f	; 63
 322:	f8 94       	cli
 324:	de bf       	out	0x3e, r29	; 62
 326:	0f be       	out	0x3f, r0	; 63
 328:	cd bf       	out	0x3d, r28	; 61
 32a:	df 91       	pop	r29
 32c:	cf 91       	pop	r28
 32e:	08 95       	ret

00000330 <fingerprintwrong>:

void fingerprintwrong(){
 330:	cf 93       	push	r28
 332:	df 93       	push	r29
 334:	cd b7       	in	r28, 0x3d	; 61
 336:	de b7       	in	r29, 0x3e	; 62
 338:	c0 56       	subi	r28, 0x60	; 96
 33a:	d1 09       	sbc	r29, r1
 33c:	0f b6       	in	r0, 0x3f	; 63
 33e:	f8 94       	cli
 340:	de bf       	out	0x3e, r29	; 62
 342:	0f be       	out	0x3f, r0	; 63
 344:	cd bf       	out	0x3d, r28	; 61
	int input[8] = {0,0,0,0,1,1,1,1};
 346:	80 e1       	ldi	r24, 0x10	; 16
 348:	e5 ec       	ldi	r30, 0xC5	; 197
 34a:	f0 e0       	ldi	r31, 0x00	; 0
 34c:	de 01       	movw	r26, r28
 34e:	11 96       	adiw	r26, 0x01	; 1
 350:	01 90       	ld	r0, Z+
 352:	0d 92       	st	X+, r0
 354:	8a 95       	dec	r24
 356:	e1 f7       	brne	.-8      	; 0x350 <fingerprintwrong+0x20>
	int status = 0;

	int storedArray[5][8] = {{1,1,1,0,0,0,0,0},
 358:	80 e5       	ldi	r24, 0x50	; 80
 35a:	e5 e7       	ldi	r30, 0x75	; 117
 35c:	f0 e0       	ldi	r31, 0x00	; 0
 35e:	de 01       	movw	r26, r28
 360:	51 96       	adiw	r26, 0x11	; 17
 362:	01 90       	ld	r0, Z+
 364:	0d 92       	st	X+, r0
 366:	8a 95       	dec	r24
 368:	e1 f7       	brne	.-8      	; 0x362 <fingerprintwrong+0x32>
	{0,0,1,0,0,0,0,0},
	{1,1,1,0,0,0,1,0},
	{1,1,1,1,0,0,0,0}};


	for(int i=0;i<5;i++){
 36a:	20 e0       	ldi	r18, 0x00	; 0
 36c:	30 e0       	ldi	r19, 0x00	; 0
 36e:	2d c0       	rjmp	.+90     	; 0x3ca <fingerprintwrong+0x9a>

		for(int j=0;j<8;j++){

			if(input[j]==storedArray[i][j]){
 370:	fc 01       	movw	r30, r24
 372:	ee 0f       	add	r30, r30
 374:	ff 1f       	adc	r31, r31
 376:	61 e0       	ldi	r22, 0x01	; 1
 378:	70 e0       	ldi	r23, 0x00	; 0
 37a:	6c 0f       	add	r22, r28
 37c:	7d 1f       	adc	r23, r29
 37e:	e6 0f       	add	r30, r22
 380:	f7 1f       	adc	r31, r23
 382:	a0 81       	ld	r26, Z
 384:	b1 81       	ldd	r27, Z+1	; 0x01
 386:	f9 01       	movw	r30, r18
 388:	ee 0f       	add	r30, r30
 38a:	ff 1f       	adc	r31, r31
 38c:	ee 0f       	add	r30, r30
 38e:	ff 1f       	adc	r31, r31
 390:	ee 0f       	add	r30, r30
 392:	ff 1f       	adc	r31, r31
 394:	e8 0f       	add	r30, r24
 396:	f9 1f       	adc	r31, r25
 398:	ee 0f       	add	r30, r30
 39a:	ff 1f       	adc	r31, r31
 39c:	e6 0f       	add	r30, r22
 39e:	f7 1f       	adc	r31, r23
 3a0:	60 89       	ldd	r22, Z+16	; 0x10
 3a2:	71 89       	ldd	r23, Z+17	; 0x11
 3a4:	a6 17       	cp	r26, r22
 3a6:	b7 07       	cpc	r27, r23
 3a8:	11 f4       	brne	.+4      	; 0x3ae <fingerprintwrong+0x7e>
				status++;
 3aa:	4f 5f       	subi	r20, 0xFF	; 255
 3ac:	5f 4f       	sbci	r21, 0xFF	; 255
	{1,1,1,1,0,0,0,0}};


	for(int i=0;i<5;i++){

		for(int j=0;j<8;j++){
 3ae:	01 96       	adiw	r24, 0x01	; 1
 3b0:	04 c0       	rjmp	.+8      	; 0x3ba <fingerprintwrong+0x8a>
 3b2:	80 e0       	ldi	r24, 0x00	; 0
 3b4:	90 e0       	ldi	r25, 0x00	; 0
 3b6:	40 e0       	ldi	r20, 0x00	; 0
 3b8:	50 e0       	ldi	r21, 0x00	; 0
 3ba:	88 30       	cpi	r24, 0x08	; 8
 3bc:	91 05       	cpc	r25, r1
 3be:	c4 f2       	brlt	.-80     	; 0x370 <fingerprintwrong+0x40>
			if(input[j]==storedArray[i][j]){
				status++;
			}
		}

		if(status==8){
 3c0:	48 30       	cpi	r20, 0x08	; 8
 3c2:	51 05       	cpc	r21, r1
 3c4:	39 f0       	breq	.+14     	; 0x3d4 <fingerprintwrong+0xa4>
	{0,0,1,0,0,0,0,0},
	{1,1,1,0,0,0,1,0},
	{1,1,1,1,0,0,0,0}};


	for(int i=0;i<5;i++){
 3c6:	2f 5f       	subi	r18, 0xFF	; 255
 3c8:	3f 4f       	sbci	r19, 0xFF	; 255
 3ca:	25 30       	cpi	r18, 0x05	; 5
 3cc:	31 05       	cpc	r19, r1
 3ce:	8c f3       	brlt	.-30     	; 0x3b2 <fingerprintwrong+0x82>
 3d0:	40 e0       	ldi	r20, 0x00	; 0
 3d2:	50 e0       	ldi	r21, 0x00	; 0
			status=0;
		}
	}


	if(status==0){
 3d4:	45 2b       	or	r20, r21
 3d6:	09 f0       	breq	.+2      	; 0x3da <fingerprintwrong+0xaa>
 3d8:	5b c0       	rjmp	.+182    	; 0x490 <__EEPROM_REGION_LENGTH__+0x90>
		buzzer(1000);
 3da:	88 ee       	ldi	r24, 0xE8	; 232
 3dc:	93 e0       	ldi	r25, 0x03	; 3
 3de:	0e 94 c8 00 	call	0x190	; 0x190 <buzzer>
		PORTA |= (1<<PA1);
 3e2:	8b b3       	in	r24, 0x1b	; 27
 3e4:	82 60       	ori	r24, 0x02	; 2
 3e6:	8b bb       	out	0x1b, r24	; 27
 3e8:	7f ef       	ldi	r23, 0xFF	; 255
 3ea:	83 ed       	ldi	r24, 0xD3	; 211
 3ec:	90 e3       	ldi	r25, 0x30	; 48
 3ee:	71 50       	subi	r23, 0x01	; 1
 3f0:	80 40       	sbci	r24, 0x00	; 0
 3f2:	90 40       	sbci	r25, 0x00	; 0
 3f4:	e1 f7       	brne	.-8      	; 0x3ee <fingerprintwrong+0xbe>
 3f6:	00 c0       	rjmp	.+0      	; 0x3f8 <fingerprintwrong+0xc8>
 3f8:	00 00       	nop
		_delay_ms(2000);
		PORTA &= ~(1<<PA1);
 3fa:	8b b3       	in	r24, 0x1b	; 27
 3fc:	8d 7f       	andi	r24, 0xFD	; 253
 3fe:	8b bb       	out	0x1b, r24	; 27
		lcdwrite(1, CMD);
 400:	60 e0       	ldi	r22, 0x00	; 0
 402:	81 e0       	ldi	r24, 0x01	; 1
 404:	0e 94 41 00 	call	0x82	; 0x82 <lcdwrite>
		lcdprint("  Fingerprint");
 408:	8d e2       	ldi	r24, 0x2D	; 45
 40a:	91 e0       	ldi	r25, 0x01	; 1
 40c:	0e 94 86 00 	call	0x10c	; 0x10c <lcdprint>
		lcdwrite(192, CMD);
 410:	60 e0       	ldi	r22, 0x00	; 0
 412:	80 ec       	ldi	r24, 0xC0	; 192
 414:	0e 94 41 00 	call	0x82	; 0x82 <lcdwrite>
		lcdprint("   Not Found");
 418:	8b e3       	ldi	r24, 0x3B	; 59
 41a:	91 e0       	ldi	r25, 0x01	; 1
 41c:	0e 94 86 00 	call	0x10c	; 0x10c <lcdprint>
 420:	2f ef       	ldi	r18, 0xFF	; 255
 422:	68 e0       	ldi	r22, 0x08	; 8
 424:	7d e3       	ldi	r23, 0x3D	; 61
 426:	21 50       	subi	r18, 0x01	; 1
 428:	60 40       	sbci	r22, 0x00	; 0
 42a:	70 40       	sbci	r23, 0x00	; 0
 42c:	e1 f7       	brne	.-8      	; 0x426 <__EEPROM_REGION_LENGTH__+0x26>
 42e:	00 c0       	rjmp	.+0      	; 0x430 <__EEPROM_REGION_LENGTH__+0x30>
 430:	00 00       	nop
		_delay_ms(2500);
		lcdwrite(1, CMD);
 432:	60 e0       	ldi	r22, 0x00	; 0
 434:	81 e0       	ldi	r24, 0x01	; 1
 436:	0e 94 41 00 	call	0x82	; 0x82 <lcdwrite>
		lcdprint(" --Safe Locker--");
 43a:	80 ef       	ldi	r24, 0xF0	; 240
 43c:	90 e0       	ldi	r25, 0x00	; 0
 43e:	0e 94 86 00 	call	0x10c	; 0x10c <lcdprint>
		lcdwrite(192, CMD);
 442:	60 e0       	ldi	r22, 0x00	; 0
 444:	80 ec       	ldi	r24, 0xC0	; 192
 446:	0e 94 41 00 	call	0x82	; 0x82 <lcdwrite>
		lcdprint(" Using Atmega32");
 44a:	81 e0       	ldi	r24, 0x01	; 1
 44c:	91 e0       	ldi	r25, 0x01	; 1
 44e:	0e 94 86 00 	call	0x10c	; 0x10c <lcdprint>
 452:	8f ef       	ldi	r24, 0xFF	; 255
 454:	93 ed       	ldi	r25, 0xD3	; 211
 456:	20 e3       	ldi	r18, 0x30	; 48
 458:	81 50       	subi	r24, 0x01	; 1
 45a:	90 40       	sbci	r25, 0x00	; 0
 45c:	20 40       	sbci	r18, 0x00	; 0
 45e:	e1 f7       	brne	.-8      	; 0x458 <__EEPROM_REGION_LENGTH__+0x58>
 460:	00 c0       	rjmp	.+0      	; 0x462 <__EEPROM_REGION_LENGTH__+0x62>
 462:	00 00       	nop
		_delay_ms(2000);
		
		lcdwrite(1, CMD);
 464:	60 e0       	ldi	r22, 0x00	; 0
 466:	81 e0       	ldi	r24, 0x01	; 1
 468:	0e 94 41 00 	call	0x82	; 0x82 <lcdwrite>
		lcdprint("    FP Found");
 46c:	81 e1       	ldi	r24, 0x11	; 17
 46e:	91 e0       	ldi	r25, 0x01	; 1
 470:	0e 94 86 00 	call	0x10c	; 0x10c <lcdprint>
 474:	8f e1       	ldi	r24, 0x1F	; 31
 476:	9e e4       	ldi	r25, 0x4E	; 78
 478:	01 97       	sbiw	r24, 0x01	; 1
 47a:	f1 f7       	brne	.-4      	; 0x478 <__EEPROM_REGION_LENGTH__+0x78>
 47c:	00 c0       	rjmp	.+0      	; 0x47e <__EEPROM_REGION_LENGTH__+0x7e>
 47e:	00 00       	nop
		_delay_ms(10);
		lcdwrite(192, CMD);
 480:	60 e0       	ldi	r22, 0x00	; 0
 482:	80 ec       	ldi	r24, 0xC0	; 192
 484:	0e 94 41 00 	call	0x82	; 0x82 <lcdwrite>
		lcdprint("  Place Finger");
 488:	8e e1       	ldi	r24, 0x1E	; 30
 48a:	91 e0       	ldi	r25, 0x01	; 1
 48c:	0e 94 86 00 	call	0x10c	; 0x10c <lcdprint>
	}
}
 490:	c0 5a       	subi	r28, 0xA0	; 160
 492:	df 4f       	sbci	r29, 0xFF	; 255
 494:	0f b6       	in	r0, 0x3f	; 63
 496:	f8 94       	cli
 498:	de bf       	out	0x3e, r29	; 62
 49a:	0f be       	out	0x3f, r0	; 63
 49c:	cd bf       	out	0x3d, r28	; 61
 49e:	df 91       	pop	r29
 4a0:	cf 91       	pop	r28
 4a2:	08 95       	ret

000004a4 <main>:


int main(){
	LCDPORTDIR |=0b11111111;
 4a4:	87 b3       	in	r24, 0x17	; 23
 4a6:	9f ef       	ldi	r25, 0xFF	; 255
 4a8:	97 bb       	out	0x17, r25	; 23
	DDRC |=0b11111110;
 4aa:	84 b3       	in	r24, 0x14	; 20
 4ac:	8e 6f       	ori	r24, 0xFE	; 254
 4ae:	84 bb       	out	0x14, r24	; 20
	DDRA |=0b11111110;
 4b0:	8a b3       	in	r24, 0x1a	; 26
 4b2:	8e 6f       	ori	r24, 0xFE	; 254
 4b4:	8a bb       	out	0x1a, r24	; 26
	DDRD |=0b11111111;
 4b6:	81 b3       	in	r24, 0x11	; 17
 4b8:	91 bb       	out	0x11, r25	; 17
	
	buzzer(2000);
 4ba:	80 ed       	ldi	r24, 0xD0	; 208
 4bc:	97 e0       	ldi	r25, 0x07	; 7
 4be:	0e 94 c8 00 	call	0x190	; 0x190 <buzzer>
	
	lcdbegin();
 4c2:	0e 94 9a 00 	call	0x134	; 0x134 <lcdbegin>
	lcdprint(" --Safe Locker--");
 4c6:	80 ef       	ldi	r24, 0xF0	; 240
 4c8:	90 e0       	ldi	r25, 0x00	; 0
 4ca:	0e 94 86 00 	call	0x10c	; 0x10c <lcdprint>
	lcdwrite(192, CMD);
 4ce:	60 e0       	ldi	r22, 0x00	; 0
 4d0:	80 ec       	ldi	r24, 0xC0	; 192
 4d2:	0e 94 41 00 	call	0x82	; 0x82 <lcdwrite>
	lcdprint(" Using Atmega32");
 4d6:	81 e0       	ldi	r24, 0x01	; 1
 4d8:	91 e0       	ldi	r25, 0x01	; 1
 4da:	0e 94 86 00 	call	0x10c	; 0x10c <lcdprint>
 4de:	2f ef       	ldi	r18, 0xFF	; 255
 4e0:	83 ed       	ldi	r24, 0xD3	; 211
 4e2:	90 e3       	ldi	r25, 0x30	; 48
 4e4:	21 50       	subi	r18, 0x01	; 1
 4e6:	80 40       	sbci	r24, 0x00	; 0
 4e8:	90 40       	sbci	r25, 0x00	; 0
 4ea:	e1 f7       	brne	.-8      	; 0x4e4 <main+0x40>
 4ec:	00 c0       	rjmp	.+0      	; 0x4ee <main+0x4a>
 4ee:	00 00       	nop
	_delay_ms(2000);
	
	lcdwrite(1, CMD);
 4f0:	60 e0       	ldi	r22, 0x00	; 0
 4f2:	81 e0       	ldi	r24, 0x01	; 1
 4f4:	0e 94 41 00 	call	0x82	; 0x82 <lcdwrite>
	lcdprint("    FP Found");
 4f8:	81 e1       	ldi	r24, 0x11	; 17
 4fa:	91 e0       	ldi	r25, 0x01	; 1
 4fc:	0e 94 86 00 	call	0x10c	; 0x10c <lcdprint>
 500:	8f e1       	ldi	r24, 0x1F	; 31
 502:	9e e4       	ldi	r25, 0x4E	; 78
 504:	01 97       	sbiw	r24, 0x01	; 1
 506:	f1 f7       	brne	.-4      	; 0x504 <main+0x60>
 508:	00 c0       	rjmp	.+0      	; 0x50a <main+0x66>
 50a:	00 00       	nop
	_delay_ms(10);
	lcdwrite(192, CMD);
 50c:	60 e0       	ldi	r22, 0x00	; 0
 50e:	80 ec       	ldi	r24, 0xC0	; 192
 510:	0e 94 41 00 	call	0x82	; 0x82 <lcdwrite>
	lcdprint("  Place Finger");
 514:	8e e1       	ldi	r24, 0x1E	; 30
 516:	91 e0       	ldi	r25, 0x01	; 1
 518:	0e 94 86 00 	call	0x10c	; 0x10c <lcdprint>
 51c:	9f ef       	ldi	r25, 0xFF	; 255
 51e:	23 ed       	ldi	r18, 0xD3	; 211
 520:	80 e3       	ldi	r24, 0x30	; 48
 522:	91 50       	subi	r25, 0x01	; 1
 524:	20 40       	sbci	r18, 0x00	; 0
 526:	80 40       	sbci	r24, 0x00	; 0
 528:	e1 f7       	brne	.-8      	; 0x522 <main+0x7e>
 52a:	00 c0       	rjmp	.+0      	; 0x52c <main+0x88>
 52c:	00 00       	nop
	_delay_ms(2000);
	
	while(1){
		
		if((PINC & (1<<PC0)) == 1){
 52e:	98 99       	sbic	0x13, 0	; 19
			
			fingerprintright();
 530:	0e 94 dd 00 	call	0x1ba	; 0x1ba <fingerprintright>
		}
		if((PINA & (1<<PA0)) == 1){
 534:	c8 9b       	sbis	0x19, 0	; 25
 536:	fb cf       	rjmp	.-10     	; 0x52e <main+0x8a>
			
			fingerprintwrong();
 538:	0e 94 98 01 	call	0x330	; 0x330 <fingerprintwrong>
 53c:	f8 cf       	rjmp	.-16     	; 0x52e <main+0x8a>

0000053e <_exit>:
 53e:	f8 94       	cli

00000540 <__stop_program>:
 540:	ff cf       	rjmp	.-2      	; 0x540 <__stop_program>
